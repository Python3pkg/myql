{
    "docs": [
        {
            "location": "/", 
            "text": "mYQL\n\n\nmYQL is a Python wrapper of the Yahoo Query Language.\n\n\nYahoo! Query Language Documentation and Support\n\n\n\n\nYahoo! Query Language\n\n\nYahoo! Developer Network\n\n\nYahoo! Application Platform\n\n\nYahoo! Social APIs\n\n\nYahoo! Query Language Console\n\n\n\n\nInstallation\n\n\n$ pip install myql\n\n\n\n\nQuick Start\n\n\nIt's important to know that \nresponse\n is a just \nrequests.models.Response\n object. \nYes indeed, \nmYQL\n uses \nrequests\n :smile:\n\n\nBy default, you have access to the \ncommunity tables\n. If for whatsoever reason you would like to not have access to those tables\n\n\n import myql\n\n yql = myql.MYQL(community=False)\n\n\n\n\nResponse format (xml or json)\n\n\nThe response format is by default \njson\n.\n\n\n import myql\n\n from myql.utils import pretty_json, pretty_xml\n\n yql = myql.MYQL(format='xml', community=True)\n\n resp = yql.rawQuery('select name, woeid from geo.states where place=\nCongo\n')\n\n print(pretty_xml(resp.content))\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nquery xmlns:yahoo=\nhttp://www.yahooapis.com/v1/base.rng\n yahoo:count=\n11\n yahoo:created=\n2015-06-07T11:56:11Z\n yahoo:lang=\nen-US\n\n    \nresults\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nCuvette-Ouest Department\n/name\n\n            \nwoeid\n55998384\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nCuvette Department\n/name\n\n            \nwoeid\n2344968\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nPlateaux District\n/name\n\n            \nwoeid\n2344973\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nSangha\n/name\n\n            \nwoeid\n2344974\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nLekoumou\n/name\n\n            \nwoeid\n2344970\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nPool Department\n/name\n\n            \nwoeid\n2344975\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nLikouala Department\n/name\n\n            \nwoeid\n2344971\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nNiari Department\n/name\n\n            \nwoeid\n2344972\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nBrazzaville\n/name\n\n            \nwoeid\n2344976\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nBouenza Department\n/name\n\n            \nwoeid\n2344967\n/woeid\n\n        \n/place\n\n        \nplace xmlns=\nhttp://where.yahooapis.com/v1/schema.rng\n\n            \nname\nKouilou\n/name\n\n            \nwoeid\n2344969\n/woeid\n\n        \n/place\n\n    \n/results\n\n\n/query\n\n\n!-- total: 33 --\n\n\n!-- pprd1-node1003-lh3.manhattan.bf1.yahoo.com --\n\n\n\n resp = yql.rawQuery('select name, woeid from geo.states where place=\nCongo\n', format='json')\n\n print(pretty_json(resp.content))\n{\n    \nquery\n: {\n        \ncount\n: 11, \n        \ncreated\n: \n2015-06-07T11:58:20Z\n, \n        \nlang\n: \nen-US\n, \n        \nresults\n: {\n            \nplace\n: [\n                {\n                    \nname\n: \nCuvette-Ouest Department\n, \n                    \nwoeid\n: \n55998384\n\n                }, \n                {\n                    \nname\n: \nCuvette Department\n, \n                    \nwoeid\n: \n2344968\n\n                }, \n                {\n                    \nname\n: \nPlateaux District\n, \n                    \nwoeid\n: \n2344973\n\n                }, \n                {\n                    \nname\n: \nSangha\n, \n                    \nwoeid\n: \n2344974\n\n                }, \n                {\n                    \nname\n: \nLekoumou\n, \n                    \nwoeid\n: \n2344970\n\n                }, \n                {\n                    \nname\n: \nPool Department\n, \n                    \nwoeid\n: \n2344975\n\n                }, \n                {\n                    \nname\n: \nLikouala Department\n, \n                    \nwoeid\n: \n2344971\n\n                }, \n                {\n                    \nname\n: \nNiari Department\n, \n                    \nwoeid\n: \n2344972\n\n                }, \n                {\n                    \nname\n: \nBrazzaville\n, \n                    \nwoeid\n: \n2344976\n\n                }, \n                {\n                    \nname\n: \nBouenza Department\n, \n                    \nwoeid\n: \n2344967\n\n                }, \n                {\n                    \nname\n: \nKouilou\n, \n                    \nwoeid\n: \n2344969\n\n                }\n            ]\n        }\n    }\n}\n\n\n\n\n\n\n\nMethods\n\n\nuse(yql_table_url,name=yql_table_name)\n\n\nMaps a table name to the URL of an Open Data Table.\n\n\n yql.use('http://www.josuebrunel.org//users.xml', name='myusers') \n\n\n\n\ndesc(tablename)\n\n\nReturns table description\n\n\n response = yql.desc('weather.forecast')\n\n print(pretty_json(response.content))\n{\n    \nquery\n: {\n        \ncount\n: 1, \n        \ncreated\n: \n2015-06-07T12:00:27Z\n, \n        \nlang\n: \nen-US\n, \n        \nresults\n: {\n            \ntable\n: {\n                \nhash\n: \naae78b1462a6a8fbc748aec4cf292767\n, \n                \nmeta\n: {\n                    \nauthor\n: \nYahoo! Inc\n, \n                    \ndescription\n: \nWeather forecast table\n, \n                    \ndocumentationURL\n: \nhttp://developer.yahoo.com/weather/\n, \n                    \nsampleQuery\n: \nselect * from weather.forecast where woeid=2502265\n\n                }, \n                \nname\n: \nweather.forecast\n, \n                \nrequest\n: {\n                    \nselect\n: [\n                        {\n                            \nkey\n: [\n                                {\n                                    \nname\n: \nlocation\n, \n                                    \nrequired\n: \ntrue\n, \n                                    \ntype\n: \nxs:string\n\n                                }, \n                                {\n                                    \nname\n: \nu\n, \n                                    \ntype\n: \nxs:string\n\n                                }\n                            ]\n                        }, \n                        {\n                            \nkey\n: [\n                                {\n                                    \nname\n: \nwoeid\n, \n                                    \nrequired\n: \ntrue\n, \n                                    \ntype\n: \nxs:string\n\n                                }, \n                                {\n                                    \nname\n: \nu\n, \n                                    \ntype\n: \nxs:string\n\n                                }\n                            ]\n                        }\n                    ]\n                }, \n                \nsecurity\n: \nANY\n\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\nrawQuery(query)\n\n\nAllows you to directly type your query\n\n\n response = yql.rawQuery(\nselect * from geo.countries where place='North America'\n)\n\n # deal with the response\n\n\n\n\nselect(table, fields, limit).where(filters, ...)\n\n\nNB\n : A simple select doesn't return any data. Use \nGET\n instead.\n\n\n response = yql.select('geo.countries', ['name', 'code', 'woeid']).where(['name', '=', 'Canada'])\n\n print(pretty_json(response.content))\n{\n    \nquery\n: {\n        \ncount\n: 1, \n        \ncreated\n: \n2015-06-07T12:10:39Z\n, \n        \nlang\n: \nen-US\n, \n        \nresults\n: {\n            \nplace\n: {\n                \nname\n: \nCanada\n, \n                \nwoeid\n: \n23424775\n\n            }\n        }\n    }\n}\n\n\n ...\n\n response = yql.select('geo.countries', ['name', 'woeid'], 2).where(['place', 'in', ('Africa', 'Europe')])\n\n from myql.utils import dump\n\n dump(response)\n{\n    \nquery\n: {\n        \ncount\n: 2, \n        \ncreated\n: \n2015-06-07T12:27:04Z\n, \n        \nlang\n: \nen-US\n, \n        \nresults\n: {\n            \nplace\n: [\n                {\n                    \nname\n: \nAlgeria\n, \n                    \nwoeid\n: \n23424740\n\n                }, \n                {\n                    \nname\n: \nAngola\n, \n                    \nwoeid\n: \n23424745\n\n                }\n            ]\n        }\n    }\n}\n\n\n\n\n\n\n\nget(table, fields, limit)\n\n\nSame as \nSELECT\n, but instead returns data.\n\n\nREMINDER\n : Some tables require a \nwhere clause\n, therefore \nGET\n won't work on those tables, use \nselect(...).where(...)\n instead .\n\n\n from myql.utils import dump\n\n response = yql.get('geo.countries', ['name', 'woeid'], 1)\n\n dump(response)\n{\n    \nquery\n: {\n        \ncount\n: 1, \n        \ncreated\n: \n2015-06-07T12:29:01Z\n, \n        \nlang\n: \nen-US\n, \n        \nresults\n: {\n            \nplace\n: {\n                \nname\n: \nSao Tome and Principe\n, \n                \nwoeid\n: \n23424966\n\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\ninsert(table, (field1, field2, ..., fieldN),(value1, value2, ..., valueN))\n\n\nInsert values into a table. Arguments 2 and 3 may be \ntuples\n or \nlist\n.\n\n\n from myql.utils import pretty_json\n\n response = yql.insert('yql.storage.admin',('value',),('http://josuebrunel.org',))\n\n print(pretty_json(response.content))\n{\n    \nquery\n: {\n        \ncount\n: 1,\n        \ncreated\n: \n2015-05-14T13:25:56Z\n,\n        \nlang\n: \nen-US\n,\n        \nresults\n: {\n            \ninserted\n: {\n                \nexecute\n: \nstore://KkkC5xDw4v32IcWWSQ4YRe\n,\n                \nselect\n: \nstore://Zc5LHXcmYM7XBfSbo9tzFL\n,\n                \nupdate\n: \nstore://Rqb5fbQyDvrfHJiClWnZ6q\n\n            }\n        }\n    }\n}\n\n\n\n\nupdate(table,[field1, ..., fieldN],[value1, ..., ...valueN]).where(filters, ...)\n\n\nUpdate fields values. This method \nis always followed by \nwhere()\n. Arguments 2 and 3 may be \ntuples\n or \nlist\n.\n\n\n from myql.utils import pretty_json\n\n response = yql.update('yql.storage',('value',),('https://josuebrunel.org',)).where(['name','=','store://Rqb5fbQyDvrfHJiClWnZ6q'])\n\n print(pretty_json(response.content))\n{\n    \nquery\n: {\n        \ncount\n: 1,\n        \ncreated\n: \n2015-05-14T13:32:52Z\n,\n        \nlang\n: \nen-US\n,\n        \nresults\n: {\n            \nsuccess\n: \nUpdated store://KkkC5xDw4v32IcWWSQ4YRe\n\n        }\n    }\n}\n\n\n\n\ndelete(table).where(filters, ...)\n\n\nDelete records\n\n\n from myql.utils import pretty_json\n\n response = self.yql.delete('yql.storage').where(['name','=','store://Rqb5fbQyDvrfHJiClWnZ6q'])\n\n print(pretty_json(response.content))\n{\n    \nquery\n: {\n        \ncount\n: 1,\n        \ncreated\n: \n2015-05-14T13:38:28Z\n,\n        \nlang\n: \nen-US\n,\n        \nresults\n: {\n            \nsuccess\n: \nstore://Rqb5fbQyDvrfHJiClWnZ6q deleted\n\n        }\n    }\n}\n\n\n\n\n\nUsing OAuth\n\n\nmYQL\n comes with \nyahoo_oauth\n, which is an OAuth library for Yahoo! APIs.\n\n\n from yahoo_oauth import OAuth1\n\n oauth = OAuth1(None, None, from_file='credentials.json') # only consumer_key and consumer_secret are required.\n\n from myql import MYQL\n\n yql = MYQL(format='xml', oauth=oauth)\n\n response = yql.getGUID('josue_brunel') # Deal with the response\n\n\n\n\nUtils\n\n\nmYQL\n comes with some useful functions, such as:\n\n\nprettyty(response, format)\n\n\nAccording to the format, call \npretty_json\n or \npretty_xml\n\n\npretty_json(response.content)\n\n\nprettyfy a JSON response content\n\n\npretty_xml(response.content)\n\n\nPrettyfy a XML response content\n\n\ndump(response)\n\n\nPrint a prettyfied response", 
            "title": "Home"
        }, 
        {
            "location": "/#myql", 
            "text": "mYQL is a Python wrapper of the Yahoo Query Language.", 
            "title": "mYQL"
        }, 
        {
            "location": "/#yahoo-query-language-documentation-and-support", 
            "text": "Yahoo! Query Language  Yahoo! Developer Network  Yahoo! Application Platform  Yahoo! Social APIs  Yahoo! Query Language Console", 
            "title": "Yahoo! Query Language Documentation and Support"
        }, 
        {
            "location": "/#installation", 
            "text": "$ pip install myql", 
            "title": "Installation"
        }, 
        {
            "location": "/#quick-start", 
            "text": "It's important to know that  response  is a just  requests.models.Response  object. \nYes indeed,  mYQL  uses  requests  :smile:  By default, you have access to the  community tables . If for whatsoever reason you would like to not have access to those tables   import myql  yql = myql.MYQL(community=False)  Response format (xml or json)  The response format is by default  json .   import myql  from myql.utils import pretty_json, pretty_xml  yql = myql.MYQL(format='xml', community=True)  resp = yql.rawQuery('select name, woeid from geo.states where place= Congo ')  print(pretty_xml(resp.content)) ?xml version= 1.0  encoding= utf-8 ?  query xmlns:yahoo= http://www.yahooapis.com/v1/base.rng  yahoo:count= 11  yahoo:created= 2015-06-07T11:56:11Z  yahoo:lang= en-US \n     results \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Cuvette-Ouest Department /name \n             woeid 55998384 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Cuvette Department /name \n             woeid 2344968 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Plateaux District /name \n             woeid 2344973 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Sangha /name \n             woeid 2344974 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Lekoumou /name \n             woeid 2344970 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Pool Department /name \n             woeid 2344975 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Likouala Department /name \n             woeid 2344971 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Niari Department /name \n             woeid 2344972 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Brazzaville /name \n             woeid 2344976 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Bouenza Department /name \n             woeid 2344967 /woeid \n         /place \n         place xmlns= http://where.yahooapis.com/v1/schema.rng \n             name Kouilou /name \n             woeid 2344969 /woeid \n         /place \n     /results  /query  !-- total: 33 --  !-- pprd1-node1003-lh3.manhattan.bf1.yahoo.com --   resp = yql.rawQuery('select name, woeid from geo.states where place= Congo ', format='json')  print(pretty_json(resp.content))\n{\n     query : {\n         count : 11, \n         created :  2015-06-07T11:58:20Z , \n         lang :  en-US , \n         results : {\n             place : [\n                {\n                     name :  Cuvette-Ouest Department , \n                     woeid :  55998384 \n                }, \n                {\n                     name :  Cuvette Department , \n                     woeid :  2344968 \n                }, \n                {\n                     name :  Plateaux District , \n                     woeid :  2344973 \n                }, \n                {\n                     name :  Sangha , \n                     woeid :  2344974 \n                }, \n                {\n                     name :  Lekoumou , \n                     woeid :  2344970 \n                }, \n                {\n                     name :  Pool Department , \n                     woeid :  2344975 \n                }, \n                {\n                     name :  Likouala Department , \n                     woeid :  2344971 \n                }, \n                {\n                     name :  Niari Department , \n                     woeid :  2344972 \n                }, \n                {\n                     name :  Brazzaville , \n                     woeid :  2344976 \n                }, \n                {\n                     name :  Bouenza Department , \n                     woeid :  2344967 \n                }, \n                {\n                     name :  Kouilou , \n                     woeid :  2344969 \n                }\n            ]\n        }\n    }\n}", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#methods", 
            "text": "use(yql_table_url,name=yql_table_name)  Maps a table name to the URL of an Open Data Table.   yql.use('http://www.josuebrunel.org//users.xml', name='myusers')   desc(tablename)  Returns table description   response = yql.desc('weather.forecast')  print(pretty_json(response.content))\n{\n     query : {\n         count : 1, \n         created :  2015-06-07T12:00:27Z , \n         lang :  en-US , \n         results : {\n             table : {\n                 hash :  aae78b1462a6a8fbc748aec4cf292767 , \n                 meta : {\n                     author :  Yahoo! Inc , \n                     description :  Weather forecast table , \n                     documentationURL :  http://developer.yahoo.com/weather/ , \n                     sampleQuery :  select * from weather.forecast where woeid=2502265 \n                }, \n                 name :  weather.forecast , \n                 request : {\n                     select : [\n                        {\n                             key : [\n                                {\n                                     name :  location , \n                                     required :  true , \n                                     type :  xs:string \n                                }, \n                                {\n                                     name :  u , \n                                     type :  xs:string \n                                }\n                            ]\n                        }, \n                        {\n                             key : [\n                                {\n                                     name :  woeid , \n                                     required :  true , \n                                     type :  xs:string \n                                }, \n                                {\n                                     name :  u , \n                                     type :  xs:string \n                                }\n                            ]\n                        }\n                    ]\n                }, \n                 security :  ANY \n            }\n        }\n    }\n}   rawQuery(query)  Allows you to directly type your query   response = yql.rawQuery( select * from geo.countries where place='North America' )  # deal with the response  select(table, fields, limit).where(filters, ...)  NB  : A simple select doesn't return any data. Use  GET  instead.   response = yql.select('geo.countries', ['name', 'code', 'woeid']).where(['name', '=', 'Canada'])  print(pretty_json(response.content))\n{\n     query : {\n         count : 1, \n         created :  2015-06-07T12:10:39Z , \n         lang :  en-US , \n         results : {\n             place : {\n                 name :  Canada , \n                 woeid :  23424775 \n            }\n        }\n    }\n}  ...  response = yql.select('geo.countries', ['name', 'woeid'], 2).where(['place', 'in', ('Africa', 'Europe')])  from myql.utils import dump  dump(response)\n{\n     query : {\n         count : 2, \n         created :  2015-06-07T12:27:04Z , \n         lang :  en-US , \n         results : {\n             place : [\n                {\n                     name :  Algeria , \n                     woeid :  23424740 \n                }, \n                {\n                     name :  Angola , \n                     woeid :  23424745 \n                }\n            ]\n        }\n    }\n}   get(table, fields, limit)  Same as  SELECT , but instead returns data.  REMINDER  : Some tables require a  where clause , therefore  GET  won't work on those tables, use  select(...).where(...)  instead .   from myql.utils import dump  response = yql.get('geo.countries', ['name', 'woeid'], 1)  dump(response)\n{\n     query : {\n         count : 1, \n         created :  2015-06-07T12:29:01Z , \n         lang :  en-US , \n         results : {\n             place : {\n                 name :  Sao Tome and Principe , \n                 woeid :  23424966 \n            }\n        }\n    }\n}   insert(table, (field1, field2, ..., fieldN),(value1, value2, ..., valueN))  Insert values into a table. Arguments 2 and 3 may be  tuples  or  list .   from myql.utils import pretty_json  response = yql.insert('yql.storage.admin',('value',),('http://josuebrunel.org',))  print(pretty_json(response.content))\n{\n     query : {\n         count : 1,\n         created :  2015-05-14T13:25:56Z ,\n         lang :  en-US ,\n         results : {\n             inserted : {\n                 execute :  store://KkkC5xDw4v32IcWWSQ4YRe ,\n                 select :  store://Zc5LHXcmYM7XBfSbo9tzFL ,\n                 update :  store://Rqb5fbQyDvrfHJiClWnZ6q \n            }\n        }\n    }\n}  update(table,[field1, ..., fieldN],[value1, ..., ...valueN]).where(filters, ...)  Update fields values. This method  is always followed by  where() . Arguments 2 and 3 may be  tuples  or  list .   from myql.utils import pretty_json  response = yql.update('yql.storage',('value',),('https://josuebrunel.org',)).where(['name','=','store://Rqb5fbQyDvrfHJiClWnZ6q'])  print(pretty_json(response.content))\n{\n     query : {\n         count : 1,\n         created :  2015-05-14T13:32:52Z ,\n         lang :  en-US ,\n         results : {\n             success :  Updated store://KkkC5xDw4v32IcWWSQ4YRe \n        }\n    }\n}  delete(table).where(filters, ...)  Delete records   from myql.utils import pretty_json  response = self.yql.delete('yql.storage').where(['name','=','store://Rqb5fbQyDvrfHJiClWnZ6q'])  print(pretty_json(response.content))\n{\n     query : {\n         count : 1,\n         created :  2015-05-14T13:38:28Z ,\n         lang :  en-US ,\n         results : {\n             success :  store://Rqb5fbQyDvrfHJiClWnZ6q deleted \n        }\n    }\n}", 
            "title": "Methods"
        }, 
        {
            "location": "/#using-oauth", 
            "text": "mYQL  comes with  yahoo_oauth , which is an OAuth library for Yahoo! APIs.   from yahoo_oauth import OAuth1  oauth = OAuth1(None, None, from_file='credentials.json') # only consumer_key and consumer_secret are required.  from myql import MYQL  yql = MYQL(format='xml', oauth=oauth)  response = yql.getGUID('josue_brunel') # Deal with the response", 
            "title": "Using OAuth"
        }, 
        {
            "location": "/#utils", 
            "text": "mYQL  comes with some useful functions, such as:  prettyty(response, format)  According to the format, call  pretty_json  or  pretty_xml  pretty_json(response.content)  prettyfy a JSON response content  pretty_xml(response.content)  Prettyfy a XML response content  dump(response)  Print a prettyfied response", 
            "title": "Utils"
        }, 
        {
            "location": "/myql/", 
            "text": "MYQL\n\n\nDefinition\n\n\nMYQL(community=True, format='json', jsonCompact=False, crossProduct=None, debug=False, oauth=None)\n\n\nMethods\n\n\nMYQL.payloadBuilder(query, format='json')\n\n\nReturn a dictionary of parameters\n\n\n\n\nquery\n : the YQL Query\n\n\nformat\n : xml or json\n\n\n\n\nMQYL.executeQuery(payload)\n\n\nExecute the query and returns and response\n\n\n\n\npayload\n : Dict of parameters\n\n\n\n\nMYQL.rawQuery(query, format=None, pretty=False)\n\n\nCall \npayloadBuilder\n to build paramaters and \nexecuteQuery\n to execute que \nquery\n then return a response.\n\n\n\n\nquery\n : the YQL Query\n\n\nformat\n : xml or json\n\n\n\n\nMYQL.clauseFormatter(condition)\n\n\nFormats conditions. \n\n\n\n\ncondition\n : list of ['column', 'operator', 'value']\n\n\n\n\ncond = ['yid', '=', 'josue_brunel']\n\n\n\n\nMQYL.buildResponse(response)\n\n\nMQYL.use(yql_table_url, name=yql_table_name)\n\n\nChange the service provider\n\n\n\n\nurl\n : url of the service provider\n\n\n\n\nMQYL.desc(table=None)\n\n\nGet the description of a table.\nIf no table name is provided, the \nself.table\n will be used.\n\n\n\n\ntable\n : Table name\n\n\n\n\nMQYL.get(table=None, items=[], limit=None)\n\n\nGet \nitems\n from \ntable\n.\n\n\n\n\ntable\n : Table name\n\n\nitems\n : Element/columns to get from the table\n\n\nlimit\n : limit of element to fetch\n\n\n\n\nMQYL.select(table=None, items=[], limit=None)\n\n\nThis method is always followed by a \nwhere\n. It doesn't return a response if called alone.\n\n\n\n\ntable\n : Table name\n\n\nitems\n : Element/columns to get from the table\n\n\nlimit\n : limit of element to fetch\n\n\n\n\n yql.select('social.profile', ['guid', 'givenName', 'gender'])\n\n\n\n\nMYQL.insert(table,[field1, field2, ..., fieldN],[value1, value2, ..., valueN])\n\n\n\n\ntable\n: Table name\n\n\nfields\n: List or Tuple of fields\n\n\nvalues\n: List or Tuple of values\n\n\n\n\n response = yql.insert('yql.storage.admin',('value',),('http://josuebrunel.org',))\n\n\n\n\nMYQL.update(table,[field1, field2, ..., fieldN],[value1, value2, ..., valueN])\n\n\nThis method is always followed by a \nwhere\n. It doesn't return a response if called alone.\n\n\n\n\ntable\n: Table name\n\n\nfields\n: List or Tuple of fields to update\n\n\nvalues\n: List or Tuple of new values\n\n\n\n\n response = yql.update('yql.storage',('value',),('https://josuebrunel.org',)).where(['name','=',\nstore://Rqb5fbQyDvrfHJiClWnZ6q\n])\n\n\n\n\nMYQL.delete(table)\n\n\nThis method is always followed by a \nwhere\n. It doesn t return a response if called alone.\n\n\n\n\ntable\n: Table name\n\n\n\n\n response = self.yql.delete('yql.storage').where(['name','=',\nstore://Rqb5fbQyDvrfHJiClWnZ6q\n])\n\n\n\n\nMQYL.where(*args)\n\n\n\n\n*args\n : List of conditions\n\n\n\n\n yql.select('mytable.friends').where(['name', '=', 'alain'], ['location', '!=', 'paris'])\n\n\n\n\nMQYL.showTables()\n\n\nList all tables \n\n\nMQYL.getGUID(username)\n\n\nReturn a user \nguid\n \n\n\n\n\nusername\n : yahoo id i.e 'josue_brunel'", 
            "title": "mYQL"
        }, 
        {
            "location": "/myql/#myql", 
            "text": "Definition  MYQL(community=True, format='json', jsonCompact=False, crossProduct=None, debug=False, oauth=None)  Methods  MYQL.payloadBuilder(query, format='json')  Return a dictionary of parameters   query  : the YQL Query  format  : xml or json   MQYL.executeQuery(payload)  Execute the query and returns and response   payload  : Dict of parameters   MYQL.rawQuery(query, format=None, pretty=False)  Call  payloadBuilder  to build paramaters and  executeQuery  to execute que  query  then return a response.   query  : the YQL Query  format  : xml or json   MYQL.clauseFormatter(condition)  Formats conditions.    condition  : list of ['column', 'operator', 'value']   cond = ['yid', '=', 'josue_brunel']  MQYL.buildResponse(response)  MQYL.use(yql_table_url, name=yql_table_name)  Change the service provider   url  : url of the service provider   MQYL.desc(table=None)  Get the description of a table.\nIf no table name is provided, the  self.table  will be used.   table  : Table name   MQYL.get(table=None, items=[], limit=None)  Get  items  from  table .   table  : Table name  items  : Element/columns to get from the table  limit  : limit of element to fetch   MQYL.select(table=None, items=[], limit=None)  This method is always followed by a  where . It doesn't return a response if called alone.   table  : Table name  items  : Element/columns to get from the table  limit  : limit of element to fetch    yql.select('social.profile', ['guid', 'givenName', 'gender'])  MYQL.insert(table,[field1, field2, ..., fieldN],[value1, value2, ..., valueN])   table : Table name  fields : List or Tuple of fields  values : List or Tuple of values    response = yql.insert('yql.storage.admin',('value',),('http://josuebrunel.org',))  MYQL.update(table,[field1, field2, ..., fieldN],[value1, value2, ..., valueN])  This method is always followed by a  where . It doesn't return a response if called alone.   table : Table name  fields : List or Tuple of fields to update  values : List or Tuple of new values    response = yql.update('yql.storage',('value',),('https://josuebrunel.org',)).where(['name','=', store://Rqb5fbQyDvrfHJiClWnZ6q ])  MYQL.delete(table)  This method is always followed by a  where . It doesn t return a response if called alone.   table : Table name    response = self.yql.delete('yql.storage').where(['name','=', store://Rqb5fbQyDvrfHJiClWnZ6q ])  MQYL.where(*args)   *args  : List of conditions    yql.select('mytable.friends').where(['name', '=', 'alain'], ['location', '!=', 'paris'])  MQYL.showTables()  List all tables   MQYL.getGUID(username)  Return a user  guid     username  : yahoo id i.e 'josue_brunel'", 
            "title": "MYQL"
        }, 
        {
            "location": "/stockscraper/", 
            "text": "StockScraper\n\n\nStockScraper\n is a module written by \nGurchet Rai\n and has just been imported into \nmYQL\n.\n\n\nFull \nDocumentation\n\n\nDefinition\n\n\nStockRetriever(format='json', debug=False, oauth=None)\n\n\n\n\nformat\n : xml or json\n\n\ndebug\n : True or False\n\n\noauth\n : yahoo_oauth (OAuth1)\n\n\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\n\n\n\n\nMethods\n\n\nStockRetriever.get_current_info(symbolList, columns=None)\n\n\n\n\nsymbolList\n : List of symbol to retrieve\n\n\ncolumns\n : List of column to fetch\n\n\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_current_info([\nYHOO\n,\nAAPL\n,\nGOOG\n])\n\n\n\n\n{\n    \nquery\n: {\n        \ncount\n: 3,\n        \ncreated\n: \n2015-05-20T12:56:27Z\n,\n        \nlang\n: \nen-US\n,\n        \nresults\n: {\n            \nquote\n: [\n                {\n                    \nAfterHoursChangeRealtime\n: null,\n                    \nAnnualizedGain\n: null,\n                    \nAsk\n: \n42.22\n,\n                    \nAskRealtime\n: null,\n                    \nAverageDailyVolume\n: \n13763800\n,\n                    \nBid\n: \n42.20\n,\n                    \nBidRealtime\n: null,\n                    \nBookValue\n: \n35.91\n,\n                    \nChange\n: \n-3.38\n,\n                    \nChangeFromFiftydayMovingAverage\n: \n-3.03\n,\n                    \nChangeFromTwoHundreddayMovingAverage\n: \n-5.46\n,\n                    \nChangeFromYearHigh\n: \n-11.64\n,\n                    \nChangeFromYearLow\n: \n8.05\n,\n                    \nChangePercentRealtime\n: null,\n                    \nChangeRealtime\n: null,\n                    \nChange_PercentChange\n: \n-3.38 - -7.62%\n,\n                    \nChangeinPercent\n: \n-7.62%\n,\n                    \nCommission\n: null,\n                    \nCurrency\n: \nUSD\n,\n                    \nDaysHigh\n: \n44.66\n,\n                    \nDaysLow\n: \n39.12\n,\n                    \nDaysRange\n: \n39.12 - 44.66\n,\n                    \nDaysRangeRealtime\n: null,\n                    \nDaysValueChange\n: null,\n                    \nDaysValueChangeRealtime\n: null,\n                    \nDividendPayDate\n: null,\n                    \nDividendShare\n: null,\n                    \nDividendYield\n: null,\n                    \nEBITDA\n: \n598.70M\n,\n                    \nEPSEstimateCurrentYear\n: \n0.78\n,\n                    \nEPSEstimateNextQuarter\n: \n0.21\n,\n                    \nEPSEstimateNextYear\n: \n0.79\n,\n                    \nEarningsShare\n: \n7.32\n,\n                    \nErrorIndicationreturnedforsymbolchangedinvalid\n: null,\n                    \nExDividendDate\n: null,\n                    \nFiftydayMovingAverage\n: \n44.01\n,\n                    \nHighLimit\n: null,\n                    \nHoldingsGain\n: null,\n                    \nHoldingsGainPercent\n: null,\n                    \nHoldingsGainPercentRealtime\n: null,\n                    \nHoldingsGainRealtime\n: null,\n                    \nHoldingsValue\n: null,\n                    \nHoldingsValueRealtime\n: null,\n                    \nLastTradeDate\n: \n5/19/2015\n,\n                    \nLastTradePriceOnly\n: \n40.98\n,\n                    \nLastTradeRealtimeWithTime\n: null,\n                    \nLastTradeTime\n: \n4:00pm\n,\n                    \nLastTradeWithTime\n: \n4:00pm - \nb\n40.98\n/b\n,\n                    \nLowLimit\n: null,\n                    \nMarketCapRealtime\n: null,\n                    \nMarketCapitalization\n: \n38.46B\n,\n                    \nMoreInfo\n: null,\n                    \nName\n: \nYahoo! Inc.\n,\n                    \nNotes\n: null,\n                    \nOneyrTargetPrice\n: \n54.45\n,\n                    \nOpen\n: \n44.48\n,\n                    \nOrderBookRealtime\n: null,\n                    \nPEGRatio\n: \n-4.24\n,\n                    \nPERatio\n: \n5.60\n,\n                    \nPERatioRealtime\n: null,\n                    \nPercebtChangeFromYearHigh\n: \n-22.12%\n,\n                    \nPercentChange\n: \n-7.62%\n,\n                    \nPercentChangeFromFiftydayMovingAverage\n: \n-6.89%\n,\n                    \nPercentChangeFromTwoHundreddayMovingAverage\n: \n-11.75%\n,\n                    \nPercentChangeFromYearLow\n: \n+24.45%\n,\n                    \nPreviousClose\n: \n44.36\n,\n                    \nPriceBook\n: \n1.24\n,\n                    \nPriceEPSEstimateCurrentYear\n: \n52.54\n,\n                    \nPriceEPSEstimateNextYear\n: \n51.22\n,\n                    \nPricePaid\n: null,\n                    \nPriceSales\n: \n8.84\n,\n                    \nSharesOwned\n: null,\n                    \nShortRatio\n: \n2.10\n,\n                    \nStockExchange\n: \nNMS\n,\n                    \nSymbol\n: \nYHOO\n,\n                    \nTickerTrend\n: null,\n                    \nTradeDate\n: null,\n                    \nTwoHundreddayMovingAverage\n: \n46.44\n,\n                    \nVolume\n: \n48892169\n,\n                    \nYearHigh\n: \n52.62\n,\n                    \nYearLow\n: \n32.93\n,\n                    \nYearRange\n: \n32.93 - 52.62\n,\n                    \nsymbol\n: \nYHOO\n\n                },\n                ...\n            ]\n        }\n    }\n}\n\n\n\n\nStockRetriever.get_news_feed(symbol)\n\n\n\n\nsymbol\n : Symbol news to retrieve\n\n\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_news_feed('YHOO')\n\n\n\n\n{\n    \nquery\n: {\n        \ncount\n: 2,\n        \ncreated\n: \n2015-05-20T13:05:27Z\n,\n        \nlang\n: \nen-US\n,\n        \nresults\n: {\n            \nitem\n: [\n                {\n                    \ndescription\n: null,\n                    \nlink\n: \nhttp://us.rd.yahoo.com/finance/news/rss/story/*http://finance.yahoo.com/news/video-may-20-premarket-briefing-110800770.html\n,\n                    \ntitle\n: \nMay 20 Premarket Briefing: 10 Things You Should Know\n\n                },\n                {\n                    \ndescription\n: \n[at MarketWatch] - How alarmed should be about a former Fed\\u2019s warning on a taper tantrum and volatility, from China to Yahoo.\n,\n                    \nlink\n: \nhttp://us.rd.yahoo.com/finance/external/cbsm/rss/SIG=11iiumket/*http://www.marketwatch.com/News/Story/Story.aspx?guid=F8AC52CC-FEAB-11E4-8608-290076337AAF\nsiteid=yhoof2\n,\n                    \ntitle\n: \nWhy it might pay to listen to a Fed old timer\\u2019s tantrum warning\n\n                }\n            ]\n        }\n    }\n}\n\n\n\n\nStockRetriever.get_historical_info(symbol, items=None, startDate=None, endDate=None, limit=None)\n\n\n\n\nsymbol\n : Symbol news to retrieve\n\n\nitems\n : columns to retrieve\n\n\nstartDate\n : starting date\n\n\nendDate\n : ending date\n\n\nlimit\n : number of results to return\n\n\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_historical_info('YHOO',items=['Open','Close','High','Low'], limit=5,startDate='2014-09-11',endDate='2015-02-10')\n\n\n\n\n{\n    \nquery\n: {\n        \ncount\n: 5, \n        \ncreated\n: \n2015-05-24T05:12:21Z\n, \n        \nlang\n: \nen-US\n, \n        \nresults\n: {\n            \nquote\n: [\n                {\n                    \nClose\n: \n43.07\n, \n                    \nHigh\n: \n43.18\n, \n                    \nLow\n: \n42.66\n, \n                    \nOpen\n: \n42.90\n\n                }, \n                {\n                    \nClose\n: \n42.57\n, \n                    \nHigh\n: \n43.15\n, \n                    \nLow\n: \n42.54\n, \n                    \nOpen\n: \n42.61\n\n                }, \n                {\n                    \nClose\n: \n42.94\n, \n                    \nHigh\n: \n43.66\n, \n                    \nLow\n: \n42.67\n, \n                    \nOpen\n: \n43.57\n\n                }, \n                {\n                    \nClose\n: \n43.55\n, \n                    \nHigh\n: \n44.26\n, \n                    \nLow\n: \n43.03\n, \n                    \nOpen\n: \n44.08\n\n                }, \n                {\n                    \nClose\n: \n44.05\n, \n                    \nHigh\n: \n44.98\n, \n                    \nLow\n: \n43.88\n, \n                    \nOpen\n: \n44.80\n\n                }\n            ]\n        }\n    }\n}\n\n\n\n\n\nStockRetriever.get_options_info(symbol, items=[], expiration=None)\n\n\n\n\nsymbol\n : Symbol news to retrieve\n\n\nitems\n : list of attributes to retrieve\n\n\nexpiration\n : Date of expiration (type : str)\n\n\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_options_info('YHOO')\n\n\n\n\n{\n    \nquery\n: {\n        \ncount\n: 1,\n        \ncreated\n: \n2015-05-20T13:09:02Z\n,\n        \nlang\n: \nen-US\n,\n        \nresults\n: {\n            \noptionsChain\n: {\n                \nsymbol\n: \nYHOO\n\n            }\n        }\n    }\n}\n\n\n\n\nStockRetriever.get_index_summary(symbol, items=[])\n\n\n\n\nsymbol\n : Symbol news to retrieve\n\n\nitems\n : list of attributes to retrieve\n\n\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_index_summary('GOOG',('Volume','Change'))\n\n\n\n\n{\n    \nquery\n: {\n        \ncount\n: 1,\n        \ncreated\n: \n2015-05-20T13:09:48Z\n,\n        \nlang\n: \nen-US\n,\n        \nresults\n: {\n            \nquote\n: {\n                \nChange\n: null,\n                \nVolume\n: \n16\n\n            }\n        }\n    }\n}\n\n\n\n\nStockRetriever.get_industry_index(index_id,items=[])\n\n\n\n\nindex_id\n : index id\n\n\nitems\n : list of attributes to retrieve\n\n\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_industry_index(112)\n\n\n\n\n{\n    \nquery\n: {\n        \ncount\n: 1,\n        \ncreated\n: \n2015-05-20T13:10:55Z\n,\n        \nlang\n: \nen-US\n,\n        \nresults\n: {\n            \nindustry\n: {\n                \ncompany\n: [\n                    {\n                        \nname\n: \nAdarsh\\nPlant Protect Ltd\n,\n                        \nsymbol\n: \nADARSHPL.BO\n\n                    },\n                    {\n                        \nname\n: \nAfrican\\nPotash Ltd\n,\n                        \nsymbol\n: \nAFPO.L\n\n                    },\n                    {\n                        \nname\n: \nAgrium\\nInc\n,\n                        \nsymbol\n: \nAGU.DE\n\n                    },\n                    {\n                        \nname\n: \nAgrium\\nInc\n,\n                        \nsymbol\n: \nAGU.TO\n\n                    },\n                    ...\n                    {\n                        \nname\n: \nZuari\\nAgro Chemicals Ltd\n,\n                        \nsymbol\n: \nZUARI.NS\n\n                    },\n                    {\n                        \nname\n: \nZuari\\nGlobal Ltd\n,\n                        \nsymbol\n: \nZUARIAGRO.NS\n\n                    },\n                    {\n                        \nname\n: \nZuari\\nGlobal Ltd\n,\n                        \nsymbol\n: \nZUARIIND.BO\n\n                    }\n                ],\n                \nid\n: \n112\n,\n                \nname\n: \n\n            }\n        }\n    }\n}\n\n\n\n\nStockRetriever.get_xchange_rate(pairs, items=None)\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_xchange_rate(['EURUSD','GBPUSD'])\n\n\n\n\n{\n    \nquery\n: {\n        \ncount\n: 2, \n        \ncreated\n: \n2015-06-27T13:48:51Z\n, \n        \nlang\n: \nen-US\n, \n        \nresults\n: {\n            \nrate\n: [\n                {\n                    \nAsk\n: \n1.1174\n, \n                    \nBid\n: \n1.1162\n, \n                    \nDate\n: \n6/27/2015\n, \n                    \nName\n: \nEUR/USD\n, \n                    \nRate\n: \n1.1168\n, \n                    \nTime\n: \n12:53pm\n, \n                    \nid\n: \nEURUSD\n\n                }, \n                {\n                    \nAsk\n: \n1.5756\n, \n                    \nBid\n: \n1.5738\n, \n                    \nDate\n: \n6/27/2015\n, \n                    \nName\n: \nGBP/USD\n, \n                    \nRate\n: \n1.5747\n, \n                    \nTime\n: \n12:53pm\n, \n                    \nid\n: \nGBPUSD\n\n                }\n            ]\n        }\n    }\n}\n\n\n\n\n\nStockRetriever.get_dividendhistory(symbol, startDate, endDate)\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_dividendhistory('AAPL',\n2008-01-01\n, \n2015-06-15\n)\n\n\n\n\n{\n    \nquery\n: {\n        \ncount\n: 12, \n        \ncreated\n: \n2015-06-27T13:42:27Z\n, \n        \nlang\n: \nen-US\n, \n        \nresults\n: {\n            \nquote\n: [\n                {\n                    \nDate\n: \n2015-05-07\n, \n                    \nDividends\n: \n0.520000\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2015-02-05\n, \n                    \nDividends\n: \n0.470000\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2014-11-06\n, \n                    \nDividends\n: \n0.470000\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2014-08-07\n, \n                    \nDividends\n: \n0.470000\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2014-05-08\n, \n                    \nDividends\n: \n0.470000\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2014-02-06\n, \n                    \nDividends\n: \n0.435710\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2013-11-06\n, \n                    \nDividends\n: \n0.435710\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2013-08-08\n, \n                    \nDividends\n: \n0.435710\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2013-05-09\n, \n                    \nDividends\n: \n0.435710\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2013-02-07\n, \n                    \nDividends\n: \n0.378570\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2012-11-07\n, \n                    \nDividends\n: \n0.378570\n, \n                    \nSymbol\n: \nAAPL\n\n                }, \n                {\n                    \nDate\n: \n2012-08-09\n, \n                    \nDividends\n: \n0.378570\n, \n                    \nSymbol\n: \nAAPL\n\n                }\n            ]\n        }\n    }\n}\n\n\n\n\n\nStockRetriever.get_symbols(company_name)\n\n\n \nAlways returns data as JSON\n\n\nfrom myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_symbols('Google')\n\n\n\n\n{\n    \nResultSet\n: {\n        \nQuery\n: \ngoogle\n,\n        \nResult\n: [\n            {\n                \nexch\n: \nNMS\n,\n                \nexchDisp\n: \nNASDAQ\n,\n                \nname\n: \nGoogle Inc.\n,\n                \nsymbol\n: \nGOOG\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            },\n            {\n                \nexch\n: \nNMS\n,\n                \nexchDisp\n: \nNASDAQ\n,\n                \nname\n: \nGoogle Inc.\n,\n                \nsymbol\n: \nGOOGL\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            },\n            {\n                \nexch\n: \nGER\n,\n                \nexchDisp\n: \nXETRA\n,\n                \nname\n: \nGoogle Inc.\n,\n                \nsymbol\n: \nGGQ7.DE\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            },\n            {\n                \nexch\n: \nMEX\n,\n                \nexchDisp\n: \nMexico\n,\n                \nname\n: \nGoogle Inc.\n,\n                \nsymbol\n: \nGOOG.MX\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            },\n            {\n                \nexch\n: \nMEX\n,\n                \nexchDisp\n: \nMexico\n,\n                \nname\n: \nGOOGLE-A\n,\n                \nsymbol\n: \nGOOGL.MX\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            },\n            {\n                \nexch\n: \nBUE\n,\n                \nexchDisp\n: \nBuenos Aires\n,\n                \nname\n: \nGoogle Inc.\n,\n                \nsymbol\n: \nGOOGL.BA\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            },\n            {\n                \nexch\n: \nFRA\n,\n                \nexchDisp\n: \nFrankfurt\n,\n                \nname\n: \nGOOGLE-A\n,\n                \nsymbol\n: \nGGQ1.F\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            },\n            {\n                \nexch\n: \nMUN\n,\n                \nexchDisp\n: \nMunich\n,\n                \nname\n: \nGOOGLE-A\n,\n                \nsymbol\n: \nGGQ1.MU\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            },\n            {\n                \nexch\n: \nEBS\n,\n                \nexchDisp\n: \nSwiss\n,\n                \nname\n: \nGOOGLE-A\n,\n                \nsymbol\n: \nGOOGL.SW\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            },\n            {\n                \nexch\n: \nMUN\n,\n                \nexchDisp\n: \nMunich\n,\n                \nname\n: \nGOOGLE-C\n,\n                \nsymbol\n: \nGGQ7.MU\n,\n                \ntype\n: \nS\n,\n                \ntypeDisp\n: \nEquity\n\n            }\n        ]\n    }\n}", 
            "title": "StockScraper"
        }, 
        {
            "location": "/stockscraper/#stockscraper", 
            "text": "StockScraper  is a module written by  Gurchet Rai  and has just been imported into  mYQL .  Full  Documentation  Definition  StockRetriever(format='json', debug=False, oauth=None)   format  : xml or json  debug  : True or False  oauth  : yahoo_oauth (OAuth1)   from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')  Methods  StockRetriever.get_current_info(symbolList, columns=None)   symbolList  : List of symbol to retrieve  columns  : List of column to fetch   from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_current_info([ YHOO , AAPL , GOOG ])  {\n     query : {\n         count : 3,\n         created :  2015-05-20T12:56:27Z ,\n         lang :  en-US ,\n         results : {\n             quote : [\n                {\n                     AfterHoursChangeRealtime : null,\n                     AnnualizedGain : null,\n                     Ask :  42.22 ,\n                     AskRealtime : null,\n                     AverageDailyVolume :  13763800 ,\n                     Bid :  42.20 ,\n                     BidRealtime : null,\n                     BookValue :  35.91 ,\n                     Change :  -3.38 ,\n                     ChangeFromFiftydayMovingAverage :  -3.03 ,\n                     ChangeFromTwoHundreddayMovingAverage :  -5.46 ,\n                     ChangeFromYearHigh :  -11.64 ,\n                     ChangeFromYearLow :  8.05 ,\n                     ChangePercentRealtime : null,\n                     ChangeRealtime : null,\n                     Change_PercentChange :  -3.38 - -7.62% ,\n                     ChangeinPercent :  -7.62% ,\n                     Commission : null,\n                     Currency :  USD ,\n                     DaysHigh :  44.66 ,\n                     DaysLow :  39.12 ,\n                     DaysRange :  39.12 - 44.66 ,\n                     DaysRangeRealtime : null,\n                     DaysValueChange : null,\n                     DaysValueChangeRealtime : null,\n                     DividendPayDate : null,\n                     DividendShare : null,\n                     DividendYield : null,\n                     EBITDA :  598.70M ,\n                     EPSEstimateCurrentYear :  0.78 ,\n                     EPSEstimateNextQuarter :  0.21 ,\n                     EPSEstimateNextYear :  0.79 ,\n                     EarningsShare :  7.32 ,\n                     ErrorIndicationreturnedforsymbolchangedinvalid : null,\n                     ExDividendDate : null,\n                     FiftydayMovingAverage :  44.01 ,\n                     HighLimit : null,\n                     HoldingsGain : null,\n                     HoldingsGainPercent : null,\n                     HoldingsGainPercentRealtime : null,\n                     HoldingsGainRealtime : null,\n                     HoldingsValue : null,\n                     HoldingsValueRealtime : null,\n                     LastTradeDate :  5/19/2015 ,\n                     LastTradePriceOnly :  40.98 ,\n                     LastTradeRealtimeWithTime : null,\n                     LastTradeTime :  4:00pm ,\n                     LastTradeWithTime :  4:00pm -  b 40.98 /b ,\n                     LowLimit : null,\n                     MarketCapRealtime : null,\n                     MarketCapitalization :  38.46B ,\n                     MoreInfo : null,\n                     Name :  Yahoo! Inc. ,\n                     Notes : null,\n                     OneyrTargetPrice :  54.45 ,\n                     Open :  44.48 ,\n                     OrderBookRealtime : null,\n                     PEGRatio :  -4.24 ,\n                     PERatio :  5.60 ,\n                     PERatioRealtime : null,\n                     PercebtChangeFromYearHigh :  -22.12% ,\n                     PercentChange :  -7.62% ,\n                     PercentChangeFromFiftydayMovingAverage :  -6.89% ,\n                     PercentChangeFromTwoHundreddayMovingAverage :  -11.75% ,\n                     PercentChangeFromYearLow :  +24.45% ,\n                     PreviousClose :  44.36 ,\n                     PriceBook :  1.24 ,\n                     PriceEPSEstimateCurrentYear :  52.54 ,\n                     PriceEPSEstimateNextYear :  51.22 ,\n                     PricePaid : null,\n                     PriceSales :  8.84 ,\n                     SharesOwned : null,\n                     ShortRatio :  2.10 ,\n                     StockExchange :  NMS ,\n                     Symbol :  YHOO ,\n                     TickerTrend : null,\n                     TradeDate : null,\n                     TwoHundreddayMovingAverage :  46.44 ,\n                     Volume :  48892169 ,\n                     YearHigh :  52.62 ,\n                     YearLow :  32.93 ,\n                     YearRange :  32.93 - 52.62 ,\n                     symbol :  YHOO \n                },\n                ...\n            ]\n        }\n    }\n}  StockRetriever.get_news_feed(symbol)   symbol  : Symbol news to retrieve   from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_news_feed('YHOO')  {\n     query : {\n         count : 2,\n         created :  2015-05-20T13:05:27Z ,\n         lang :  en-US ,\n         results : {\n             item : [\n                {\n                     description : null,\n                     link :  http://us.rd.yahoo.com/finance/news/rss/story/*http://finance.yahoo.com/news/video-may-20-premarket-briefing-110800770.html ,\n                     title :  May 20 Premarket Briefing: 10 Things You Should Know \n                },\n                {\n                     description :  [at MarketWatch] - How alarmed should be about a former Fed\\u2019s warning on a taper tantrum and volatility, from China to Yahoo. ,\n                     link :  http://us.rd.yahoo.com/finance/external/cbsm/rss/SIG=11iiumket/*http://www.marketwatch.com/News/Story/Story.aspx?guid=F8AC52CC-FEAB-11E4-8608-290076337AAF siteid=yhoof2 ,\n                     title :  Why it might pay to listen to a Fed old timer\\u2019s tantrum warning \n                }\n            ]\n        }\n    }\n}  StockRetriever.get_historical_info(symbol, items=None, startDate=None, endDate=None, limit=None)   symbol  : Symbol news to retrieve  items  : columns to retrieve  startDate  : starting date  endDate  : ending date  limit  : number of results to return   from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_historical_info('YHOO',items=['Open','Close','High','Low'], limit=5,startDate='2014-09-11',endDate='2015-02-10')  {\n     query : {\n         count : 5, \n         created :  2015-05-24T05:12:21Z , \n         lang :  en-US , \n         results : {\n             quote : [\n                {\n                     Close :  43.07 , \n                     High :  43.18 , \n                     Low :  42.66 , \n                     Open :  42.90 \n                }, \n                {\n                     Close :  42.57 , \n                     High :  43.15 , \n                     Low :  42.54 , \n                     Open :  42.61 \n                }, \n                {\n                     Close :  42.94 , \n                     High :  43.66 , \n                     Low :  42.67 , \n                     Open :  43.57 \n                }, \n                {\n                     Close :  43.55 , \n                     High :  44.26 , \n                     Low :  43.03 , \n                     Open :  44.08 \n                }, \n                {\n                     Close :  44.05 , \n                     High :  44.98 , \n                     Low :  43.88 , \n                     Open :  44.80 \n                }\n            ]\n        }\n    }\n}  StockRetriever.get_options_info(symbol, items=[], expiration=None)   symbol  : Symbol news to retrieve  items  : list of attributes to retrieve  expiration  : Date of expiration (type : str)   from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_options_info('YHOO')  {\n     query : {\n         count : 1,\n         created :  2015-05-20T13:09:02Z ,\n         lang :  en-US ,\n         results : {\n             optionsChain : {\n                 symbol :  YHOO \n            }\n        }\n    }\n}  StockRetriever.get_index_summary(symbol, items=[])   symbol  : Symbol news to retrieve  items  : list of attributes to retrieve   from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_index_summary('GOOG',('Volume','Change'))  {\n     query : {\n         count : 1,\n         created :  2015-05-20T13:09:48Z ,\n         lang :  en-US ,\n         results : {\n             quote : {\n                 Change : null,\n                 Volume :  16 \n            }\n        }\n    }\n}  StockRetriever.get_industry_index(index_id,items=[])   index_id  : index id  items  : list of attributes to retrieve   from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_industry_index(112)  {\n     query : {\n         count : 1,\n         created :  2015-05-20T13:10:55Z ,\n         lang :  en-US ,\n         results : {\n             industry : {\n                 company : [\n                    {\n                         name :  Adarsh\\nPlant Protect Ltd ,\n                         symbol :  ADARSHPL.BO \n                    },\n                    {\n                         name :  African\\nPotash Ltd ,\n                         symbol :  AFPO.L \n                    },\n                    {\n                         name :  Agrium\\nInc ,\n                         symbol :  AGU.DE \n                    },\n                    {\n                         name :  Agrium\\nInc ,\n                         symbol :  AGU.TO \n                    },\n                    ...\n                    {\n                         name :  Zuari\\nAgro Chemicals Ltd ,\n                         symbol :  ZUARI.NS \n                    },\n                    {\n                         name :  Zuari\\nGlobal Ltd ,\n                         symbol :  ZUARIAGRO.NS \n                    },\n                    {\n                         name :  Zuari\\nGlobal Ltd ,\n                         symbol :  ZUARIIND.BO \n                    }\n                ],\n                 id :  112 ,\n                 name :  \n            }\n        }\n    }\n}  StockRetriever.get_xchange_rate(pairs, items=None)  from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_xchange_rate(['EURUSD','GBPUSD'])  {\n     query : {\n         count : 2, \n         created :  2015-06-27T13:48:51Z , \n         lang :  en-US , \n         results : {\n             rate : [\n                {\n                     Ask :  1.1174 , \n                     Bid :  1.1162 , \n                     Date :  6/27/2015 , \n                     Name :  EUR/USD , \n                     Rate :  1.1168 , \n                     Time :  12:53pm , \n                     id :  EURUSD \n                }, \n                {\n                     Ask :  1.5756 , \n                     Bid :  1.5738 , \n                     Date :  6/27/2015 , \n                     Name :  GBP/USD , \n                     Rate :  1.5747 , \n                     Time :  12:53pm , \n                     id :  GBPUSD \n                }\n            ]\n        }\n    }\n}  StockRetriever.get_dividendhistory(symbol, startDate, endDate)  from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_dividendhistory('AAPL', 2008-01-01 ,  2015-06-15 )  {\n     query : {\n         count : 12, \n         created :  2015-06-27T13:42:27Z , \n         lang :  en-US , \n         results : {\n             quote : [\n                {\n                     Date :  2015-05-07 , \n                     Dividends :  0.520000 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2015-02-05 , \n                     Dividends :  0.470000 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2014-11-06 , \n                     Dividends :  0.470000 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2014-08-07 , \n                     Dividends :  0.470000 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2014-05-08 , \n                     Dividends :  0.470000 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2014-02-06 , \n                     Dividends :  0.435710 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2013-11-06 , \n                     Dividends :  0.435710 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2013-08-08 , \n                     Dividends :  0.435710 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2013-05-09 , \n                     Dividends :  0.435710 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2013-02-07 , \n                     Dividends :  0.378570 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2012-11-07 , \n                     Dividends :  0.378570 , \n                     Symbol :  AAPL \n                }, \n                {\n                     Date :  2012-08-09 , \n                     Dividends :  0.378570 , \n                     Symbol :  AAPL \n                }\n            ]\n        }\n    }\n}  StockRetriever.get_symbols(company_name)    Always returns data as JSON  from myql.contrib.finance.stockscraper import StockRetriever\nstocks = StockRetriever(format='json')\ndata = stocks.get_symbols('Google')  {\n     ResultSet : {\n         Query :  google ,\n         Result : [\n            {\n                 exch :  NMS ,\n                 exchDisp :  NASDAQ ,\n                 name :  Google Inc. ,\n                 symbol :  GOOG ,\n                 type :  S ,\n                 typeDisp :  Equity \n            },\n            {\n                 exch :  NMS ,\n                 exchDisp :  NASDAQ ,\n                 name :  Google Inc. ,\n                 symbol :  GOOGL ,\n                 type :  S ,\n                 typeDisp :  Equity \n            },\n            {\n                 exch :  GER ,\n                 exchDisp :  XETRA ,\n                 name :  Google Inc. ,\n                 symbol :  GGQ7.DE ,\n                 type :  S ,\n                 typeDisp :  Equity \n            },\n            {\n                 exch :  MEX ,\n                 exchDisp :  Mexico ,\n                 name :  Google Inc. ,\n                 symbol :  GOOG.MX ,\n                 type :  S ,\n                 typeDisp :  Equity \n            },\n            {\n                 exch :  MEX ,\n                 exchDisp :  Mexico ,\n                 name :  GOOGLE-A ,\n                 symbol :  GOOGL.MX ,\n                 type :  S ,\n                 typeDisp :  Equity \n            },\n            {\n                 exch :  BUE ,\n                 exchDisp :  Buenos Aires ,\n                 name :  Google Inc. ,\n                 symbol :  GOOGL.BA ,\n                 type :  S ,\n                 typeDisp :  Equity \n            },\n            {\n                 exch :  FRA ,\n                 exchDisp :  Frankfurt ,\n                 name :  GOOGLE-A ,\n                 symbol :  GGQ1.F ,\n                 type :  S ,\n                 typeDisp :  Equity \n            },\n            {\n                 exch :  MUN ,\n                 exchDisp :  Munich ,\n                 name :  GOOGLE-A ,\n                 symbol :  GGQ1.MU ,\n                 type :  S ,\n                 typeDisp :  Equity \n            },\n            {\n                 exch :  EBS ,\n                 exchDisp :  Swiss ,\n                 name :  GOOGLE-A ,\n                 symbol :  GOOGL.SW ,\n                 type :  S ,\n                 typeDisp :  Equity \n            },\n            {\n                 exch :  MUN ,\n                 exchDisp :  Munich ,\n                 name :  GOOGLE-C ,\n                 symbol :  GGQ7.MU ,\n                 type :  S ,\n                 typeDisp :  Equity \n            }\n        ]\n    }\n}", 
            "title": "StockScraper"
        }, 
        {
            "location": "/oauth/", 
            "text": "Yahoo-OAuth\n\n\nThe \nYOAuth\n module is not supported anymore. mYQL comes with\n \nYahoo-OAuth\n. \n From now on, this will be the library to use to when you want to use \nOAuth\n. \n Nothing has really changed anyway, since \nyahoo-oauth\n is based on \nYOAuth\n.\n\n\nYou can read the full documentation \nhere\n\n\n import myql\n\n from yahoo_oauth import OAuth1\n\n oauth = OAuth1(None, None, from_file='credentials.json')\n\n yql = myql.MYQL(format='xml',oauth=oauth)\n\n response = yql.getGUID('josue_brunel')\n...", 
            "title": "Yahoo-OAuth"
        }, 
        {
            "location": "/oauth/#yahoo-oauth", 
            "text": "The  YOAuth  module is not supported anymore. mYQL comes with\n  Yahoo-OAuth . \n From now on, this will be the library to use to when you want to use  OAuth . \n Nothing has really changed anyway, since  yahoo-oauth  is based on  YOAuth .  You can read the full documentation  here   import myql  from yahoo_oauth import OAuth1  oauth = OAuth1(None, None, from_file='credentials.json')  yql = myql.MYQL(format='xml',oauth=oauth)  response = yql.getGUID('josue_brunel')\n...", 
            "title": "Yahoo-OAuth"
        }, 
        {
            "location": "/table/", 
            "text": "YQL Open Table\n\n\nTable\n\n\nThis class represents the \nroot\n element of a YQL Table Definition File. You can read about the full documentation \nhere\n\n\nDefinition\n\n\nTable(name, author, apiKeyURL, documentationURL, sampleQuery=[], description=None, table_attr=None, bindings=[])\n\n\n from myql.contrib.table import Table\n\n mytable = Table('mytable', 'Josue Kouka', 'http://josuerunel.org/mytable/','http://josuerunel.org/mytable/docs.html',sampleQuery = ['SELECT * FROM mytable', 'SELECT name FROM mytable WHERE id = 77'], description='Just a simple tabe', table_attr={'xmlns':'http://query.yahooapis.com/v1/schema/table.xsd', 'securityLevel':'any', 'https':'false'})\n\n\n\n\nMethods\n\n\nTable.addBinder(binder_object)\n\n\nAdd a binder to the table \n\n\n mytable.addBinder(select_binder)\n\n\n\n\nTable.removeBinder(binder_object)\n\n\nRemove a binder from the table\n\n\n mytable.removeBinder(select_binder)\n\n\n\n\nTable.save(name=None, path=None)\n\n\nSave the table as a \nxml file\n with Table Object name if \nname\n is not provided. If \npath\n, saves the \nxml file\n to the specified location\n\n\n mytable.save(name='test',path='/var/www/josuebrunel.org/mytable/')\n\n\n\n\nInputs\n\n\nThere are 3 kind of \ninputs\n as described in the \ndocumentation\n :\n\n\n\n\nkey\n  \n\n\nmap\n \n\n\nvalue\n  \n\n\n\n\nDefinitions\n\n\n\n\n\n\nInputKey(id, type, paramType, like='', required=False, default='', private=False, const=False, batchable=False, maxBatchItems=0)\n\n\n\n\n\n\nsong = InputKey(id='song', type='xs:string', paramType='path', required=True)\n\n\n\n\n\n\n\n\nInputValue(id, type, paramType, like='', required=False, default='', private=False, const=False, batchable=False, maxBatchItems=0)\n\n\n\n\n\n\nsong = InputValue(id='song', type='xs:string', paramType='path', required=True, const='12' )\n\n\n\n\n\n\n\n\nInputMap(id, type, paramType, like='', required=False, default='', private=False, const=False, batchable=False, maxBatchItems=0)\n\n\n\n\n\n\nAll of those classes are based on \nBaseInput\n.\n\n\nlike\n is a replacement for \nas\n which is a python keyword. In the \nxml\n file, \nas\n will be displayed.\n\n\nMethods\n\n\nNo methods defined\n\n\nPaging\n\n\nThis class describe a \npaging\n element. A \npaging\n is deifined by one of the 3 classes below :\n\n\n\n\nPagingPage\n\n\nPagingUrl\n\n\nPagingOffset\n\n\n\n\nCheck out the full \ndocumentation\n\n\nDefinitions\n\n\n\n\n\n\nPagingPage(start={}, pageSize={}, total={})\n\n\n\n\n\n\n mypage = PagingPage({'id': 'ItemPage', 'default': '1'}, {'id':'Count' ,'max':'25'},{'default': '10'})\n\n\n\n\n\n\n\n\nPagingUrl(nextpage)\n\n\n\n\n\n\n mypage = PagingUrl(\nysearchresponse.nextpage\n)\n\n\n\n\n\n\n\n\nPagingOffset(matrix, start={}, pageSize={}, total={})\n\n\n\n\n\n\n mypage = PagingOffset({'id': 'ItemPage', 'default': '1'}, {'id':'Count' ,'max':'25'},{'default': '10'})\n\n\n\n\nAll these classes above subclass \nBasePaging\n .\n\n\nMethods\n\n\nNo methods defined\n\n\nBinder\n\n\nThis class represents an element under \n. Which means :\n\n\n\n\nselect\n\n\ninsert\n\n\nupdate\n\n\ndelete\n\n\n\n\nYou can read about the full documentation \nhere\n\n\nDefinition\n\n\nBinder(name, itemPath, produces, pollingFrequencySeconds=0, urls=[], inputs=[], paging=None)\n\n\n select = Binder('select', 'products.product', 'xml')\n\n\n\n\nMethods\n\n\nBinder.addInput(input_object)\n :\n\n\nAdd an input object to the binder\n\n\n song = InputKey(id='song', type='xs:string', paramType='path', required=True)\n\n select.addBinder(song)\n\n\n\n\nBinder.removeInput(input_id, input_type)\n\n\nRemove an input object from the binder. \ninput_type\n may be \nkey, value or map\n\n\n select.removeBinder('song','select')\n\n\n\n\nBinder.addUrl(url)\n\n\nAdd an url to the binder\n\n\n select.addUrl('http://lol.com/{song}')\n\n\n\n\nBinder.removeUrl(url)\n\n\nRemove an url from the binder\n\n\n select.removeUrl('http://lol.com/{song}')\n\n\n\n\nBinder.addPaging(paging_instance)\n\n\nAdd a paging to the binder\n\n\n mypage = PagingUrl(\nysearchresponse.nextpage\n)\n\n select.addPaging(mypage)\n\n\n\n\nBinder.removePaging()\n\n\nRemove a paging from the binder\n\n\n select.removePaging()\n\n\n\n\nBinderFunction\n\n\nThis class represents a stored function. Read the full documentation \nhere\n\n\nDefinition\n\n\nBinderFunction(func_name, func_code='', func_file=None, inputs=[])\n\n\n\n\nfunc_name\n   : function name\n\n\nfunc_code\n   : function code passed as string\n\n\nfunc_file\n   : file containing the function\n\n\ninputs\n      : list of inputs\n\n\n\n\n myfunc = BinderFunction('concat', func_code=\nconsole.log('Hello Josh!!!')\n)\n\n\n\n\nMethods\n\n\nAs \nBinder\n, \nBinderFunction\n is a subclass of \nBaseBinder\n. They both share the same methods\n\n\nThe MetaClass API\n\n\nBinderModel\n and \nTableModel\n are the only classes to keep in mind here. They're respectively subclasses of \nBinderMeta\n and \nTableMeta\n. Those last two help providing a powerful API to define YQL Table.\n\n\nThey say \n\"A picture is worth a thousand of words\"\n and I say \n\"A code snippet \nis worth ...\"\n . You got it (^_^). \n\n\nCopy and paste the code snippet below in a \nexample.py\n\n\nfrom myql.contrib.table import BinderModel, InputKey, PagingPage, PagingUrl, InputValue, BinderFunction\nfrom myql.contrib.table import TableModel, BinderFrom\n\nclass SelectBinder(BinderModel):\n    name = 'select'\n    itemPath = 'products.product'\n    produces = 'xml'\n    pollingFrequencySeconds = 30\n    urls = ['http://lol.com/services?artist={artis}','http://lol.com/services/song={song}']\n    paging = PagingPage({'id': 'ItemPage', 'default': '1'}, {'id':'Count' ,'max':'25'},{'default': '10'})\n    artist = InputKey(id='artist', type='xs:string', paramType='path')\n    song = InputKey(id='song', type='xs:string', paramType='path', required=True)\n\nclass InsertBinder(BinderModel):\n    name = 'insert'\n    itemPath = 'products.product'\n    produces = 'xml'\n    pollingFrequencySeconds = 30\n    urls = ['http://lol.com/services?artist={artis}','http://lol.com/services/song={song}']\n    paging = PagingUrl(nextpage={'path':'yqlsearch.nextpage'})\n    artist = InputKey(id='artist', type='xs:string', paramType='path')\n    song = InputValue(id='song', type='xs:string', paramType='path', required=True)\n\n\nclass TestTable(TableModel):\n    name = 'Test'\n    author = 'Josue Kouka'\n    apiKeyURL = 'http://josuebrunel.org/api'\n    documentationURL = 'http://josuebrunel.org/doc.html'\n    description = \nJust a test table\n\n    sampleQuery = ['SELECT * FROM mytable','SELECT name FROM mytable WHERE id=4656', \nSELECT * FROM mytable WHERE name='Josh'\n]\n    select = BinderFrom(SelectBinder)\n    insert = BinderFrom(InsertBinder)\n    func1 = BinderFunction('concat', func_code=\nconsole.log('Hello Josh!!!')\n)\n\nTestTable.table.save(name='Example')\n\n\n\n\nRun \n\n\n$ python example.py\n$ cat Example.xml\n\n\n\n\n?xml version=\n1.0\n ?\n\n\ntable https=\nfalse\n securityLevel=\nany\n xmlns=\nhttp://query.yahooapis.com/v1/schema/table.xsd\n\n    \nmeta\n\n        \napiKey\nhttp://josuebrunel.org/api\n/apiKey\n\n        \nauthor\nJosue Kouka\n/author\n\n        \ndescription\nJust a test table\n/description\n\n        \ndocumentationURL\nhttp://josuebrunel.org/doc.html\n/documentationURL\n\n        \nsampleQuery\nSELECT * FROM mytable\n/sampleQuery\n\n        \nsampleQuery\nSELECT name FROM mytable WHERE id=4656\n/sampleQuery\n\n        \nsampleQuery\nSELECT * FROM mytable WHERE name='Josh'\n/sampleQuery\n\n    \n/meta\n\n    \nbindings\n\n        \nfunction name=\nconcat\n\n            \nexecute\n\n    ![CDATA]console.log('Hello Josh!!!')]]\n    \n/execute\n\n        \n/function\n\n        \ninsert itemPath=\nproducts.product\n produces=\nxml\n\n            \nurls\n\n                \nurl\nhttp://lol.com/services?artist={artis}\n/url\n\n                \nurl\nhttp://lol.com/services/song={song}\n/url\n\n            \n/urls\n\n            \ninputs\n\n                \nvalue id=\nsong\n required=\ntrue\n type=\nxs:string\n/\n\n                \nkey id=\nartist\n type=\nxs:string\n/\n\n            \n/inputs\n\n            \npaging model=\nurl\n\n                \nnextpage path=\nyqlsearch.nextpage\n/\n\n            \n/paging\n\n        \n/insert\n\n        \nselect itemPath=\nproducts.product\n produces=\nxml\n\n            \nurls\n\n                \nurl\nhttp://lol.com/services?artist={artis}\n/url\n\n                \nurl\nhttp://lol.com/services/song={song}\n/url\n\n            \n/urls\n\n            \ninputs\n\n                \nkey id=\nsong\n required=\ntrue\n type=\nxs:string\n/\n\n                \nkey id=\nartist\n type=\nxs:string\n/\n\n            \n/inputs\n\n            \npaging model=\npage\n\n                \nstart default=\n1\n id=\nItemPage\n/\n\n                \ntotal default=\n10\n/\n\n                \npageSize id=\nCount\n max=\n25\n/\n\n            \n/paging\n\n        \n/select\n\n    \n/bindings\n\n\n/table\n\n\n\n\n\n\nVoila, i think we're done here", 
            "title": "Open Tables"
        }, 
        {
            "location": "/table/#yql-open-table", 
            "text": "", 
            "title": "YQL Open Table"
        }, 
        {
            "location": "/table/#table", 
            "text": "This class represents the  root  element of a YQL Table Definition File. You can read about the full documentation  here  Definition  Table(name, author, apiKeyURL, documentationURL, sampleQuery=[], description=None, table_attr=None, bindings=[])   from myql.contrib.table import Table  mytable = Table('mytable', 'Josue Kouka', 'http://josuerunel.org/mytable/','http://josuerunel.org/mytable/docs.html',sampleQuery = ['SELECT * FROM mytable', 'SELECT name FROM mytable WHERE id = 77'], description='Just a simple tabe', table_attr={'xmlns':'http://query.yahooapis.com/v1/schema/table.xsd', 'securityLevel':'any', 'https':'false'})  Methods  Table.addBinder(binder_object)  Add a binder to the table    mytable.addBinder(select_binder)  Table.removeBinder(binder_object)  Remove a binder from the table   mytable.removeBinder(select_binder)  Table.save(name=None, path=None)  Save the table as a  xml file  with Table Object name if  name  is not provided. If  path , saves the  xml file  to the specified location   mytable.save(name='test',path='/var/www/josuebrunel.org/mytable/')", 
            "title": "Table"
        }, 
        {
            "location": "/table/#inputs", 
            "text": "There are 3 kind of  inputs  as described in the  documentation  :   key     map    value      Definitions    InputKey(id, type, paramType, like='', required=False, default='', private=False, const=False, batchable=False, maxBatchItems=0)    song = InputKey(id='song', type='xs:string', paramType='path', required=True)    InputValue(id, type, paramType, like='', required=False, default='', private=False, const=False, batchable=False, maxBatchItems=0)    song = InputValue(id='song', type='xs:string', paramType='path', required=True, const='12' )    InputMap(id, type, paramType, like='', required=False, default='', private=False, const=False, batchable=False, maxBatchItems=0)    All of those classes are based on  BaseInput .  like  is a replacement for  as  which is a python keyword. In the  xml  file,  as  will be displayed.  Methods  No methods defined", 
            "title": "Inputs"
        }, 
        {
            "location": "/table/#paging", 
            "text": "This class describe a  paging  element. A  paging  is deifined by one of the 3 classes below :   PagingPage  PagingUrl  PagingOffset   Check out the full  documentation  Definitions    PagingPage(start={}, pageSize={}, total={})     mypage = PagingPage({'id': 'ItemPage', 'default': '1'}, {'id':'Count' ,'max':'25'},{'default': '10'})    PagingUrl(nextpage)     mypage = PagingUrl( ysearchresponse.nextpage )    PagingOffset(matrix, start={}, pageSize={}, total={})     mypage = PagingOffset({'id': 'ItemPage', 'default': '1'}, {'id':'Count' ,'max':'25'},{'default': '10'})  All these classes above subclass  BasePaging  .  Methods  No methods defined", 
            "title": "Paging"
        }, 
        {
            "location": "/table/#binder", 
            "text": "This class represents an element under  . Which means :   select  insert  update  delete   You can read about the full documentation  here  Definition  Binder(name, itemPath, produces, pollingFrequencySeconds=0, urls=[], inputs=[], paging=None)   select = Binder('select', 'products.product', 'xml')  Methods  Binder.addInput(input_object)  :  Add an input object to the binder   song = InputKey(id='song', type='xs:string', paramType='path', required=True)  select.addBinder(song)  Binder.removeInput(input_id, input_type)  Remove an input object from the binder.  input_type  may be  key, value or map   select.removeBinder('song','select')  Binder.addUrl(url)  Add an url to the binder   select.addUrl('http://lol.com/{song}')  Binder.removeUrl(url)  Remove an url from the binder   select.removeUrl('http://lol.com/{song}')  Binder.addPaging(paging_instance)  Add a paging to the binder   mypage = PagingUrl( ysearchresponse.nextpage )  select.addPaging(mypage)  Binder.removePaging()  Remove a paging from the binder   select.removePaging()", 
            "title": "Binder"
        }, 
        {
            "location": "/table/#binderfunction", 
            "text": "This class represents a stored function. Read the full documentation  here  Definition  BinderFunction(func_name, func_code='', func_file=None, inputs=[])   func_name    : function name  func_code    : function code passed as string  func_file    : file containing the function  inputs       : list of inputs    myfunc = BinderFunction('concat', func_code= console.log('Hello Josh!!!') )  Methods  As  Binder ,  BinderFunction  is a subclass of  BaseBinder . They both share the same methods", 
            "title": "BinderFunction"
        }, 
        {
            "location": "/table/#the-metaclass-api", 
            "text": "BinderModel  and  TableModel  are the only classes to keep in mind here. They're respectively subclasses of  BinderMeta  and  TableMeta . Those last two help providing a powerful API to define YQL Table.  They say  \"A picture is worth a thousand of words\"  and I say  \"A code snippet \nis worth ...\"  . You got it (^_^).   Copy and paste the code snippet below in a  example.py  from myql.contrib.table import BinderModel, InputKey, PagingPage, PagingUrl, InputValue, BinderFunction\nfrom myql.contrib.table import TableModel, BinderFrom\n\nclass SelectBinder(BinderModel):\n    name = 'select'\n    itemPath = 'products.product'\n    produces = 'xml'\n    pollingFrequencySeconds = 30\n    urls = ['http://lol.com/services?artist={artis}','http://lol.com/services/song={song}']\n    paging = PagingPage({'id': 'ItemPage', 'default': '1'}, {'id':'Count' ,'max':'25'},{'default': '10'})\n    artist = InputKey(id='artist', type='xs:string', paramType='path')\n    song = InputKey(id='song', type='xs:string', paramType='path', required=True)\n\nclass InsertBinder(BinderModel):\n    name = 'insert'\n    itemPath = 'products.product'\n    produces = 'xml'\n    pollingFrequencySeconds = 30\n    urls = ['http://lol.com/services?artist={artis}','http://lol.com/services/song={song}']\n    paging = PagingUrl(nextpage={'path':'yqlsearch.nextpage'})\n    artist = InputKey(id='artist', type='xs:string', paramType='path')\n    song = InputValue(id='song', type='xs:string', paramType='path', required=True)\n\n\nclass TestTable(TableModel):\n    name = 'Test'\n    author = 'Josue Kouka'\n    apiKeyURL = 'http://josuebrunel.org/api'\n    documentationURL = 'http://josuebrunel.org/doc.html'\n    description =  Just a test table \n    sampleQuery = ['SELECT * FROM mytable','SELECT name FROM mytable WHERE id=4656',  SELECT * FROM mytable WHERE name='Josh' ]\n    select = BinderFrom(SelectBinder)\n    insert = BinderFrom(InsertBinder)\n    func1 = BinderFunction('concat', func_code= console.log('Hello Josh!!!') )\n\nTestTable.table.save(name='Example')  Run   $ python example.py\n$ cat Example.xml  ?xml version= 1.0  ?  table https= false  securityLevel= any  xmlns= http://query.yahooapis.com/v1/schema/table.xsd \n     meta \n         apiKey http://josuebrunel.org/api /apiKey \n         author Josue Kouka /author \n         description Just a test table /description \n         documentationURL http://josuebrunel.org/doc.html /documentationURL \n         sampleQuery SELECT * FROM mytable /sampleQuery \n         sampleQuery SELECT name FROM mytable WHERE id=4656 /sampleQuery \n         sampleQuery SELECT * FROM mytable WHERE name='Josh' /sampleQuery \n     /meta \n     bindings \n         function name= concat \n             execute \n    ![CDATA]console.log('Hello Josh!!!')]]\n     /execute \n         /function \n         insert itemPath= products.product  produces= xml \n             urls \n                 url http://lol.com/services?artist={artis} /url \n                 url http://lol.com/services/song={song} /url \n             /urls \n             inputs \n                 value id= song  required= true  type= xs:string / \n                 key id= artist  type= xs:string / \n             /inputs \n             paging model= url \n                 nextpage path= yqlsearch.nextpage / \n             /paging \n         /insert \n         select itemPath= products.product  produces= xml \n             urls \n                 url http://lol.com/services?artist={artis} /url \n                 url http://lol.com/services/song={song} /url \n             /urls \n             inputs \n                 key id= song  required= true  type= xs:string / \n                 key id= artist  type= xs:string / \n             /inputs \n             paging model= page \n                 start default= 1  id= ItemPage / \n                 total default= 10 / \n                 pageSize id= Count  max= 25 / \n             /paging \n         /select \n     /bindings  /table   Voila, i think we're done here", 
            "title": "The MetaClass API"
        }, 
        {
            "location": "/contrib/", 
            "text": "How to contribute\n\n\nIt's easy to contribute to \nMYQL\n. \n\n\n\n\nFork the repository\n\n\nDevelop your patches/fixes/features\n\n\nCreate a merge request\n\n\n\n\nThat's all\n\n\nTips\n\n\nIf you want to add a new feature to the library, you better put it in \nmyql/contrib/my_awesome_feature/\n\n\nLet's say i want to add a \nweather\n module.\n\n\n$ mkdir myql/contrib/weather/\n$ vim myql/contrib/__init__.py\n\n\n\n\n...\nimport weather\n\n\n\n\n$ vim myql/contrib/weather/__init__.py\nfrom weather import my_stuff\n$ vim myql/contrib/weather/weather.py\n\n\n\n\nfrom myql.myql import MYQL # If ever you want to use the module\n# Your code", 
            "title": "Contribute"
        }, 
        {
            "location": "/contrib/#how-to-contribute", 
            "text": "It's easy to contribute to  MYQL .    Fork the repository  Develop your patches/fixes/features  Create a merge request   That's all  Tips  If you want to add a new feature to the library, you better put it in  myql/contrib/my_awesome_feature/  Let's say i want to add a  weather  module.  $ mkdir myql/contrib/weather/\n$ vim myql/contrib/__init__.py  ...\nimport weather  $ vim myql/contrib/weather/__init__.py\nfrom weather import my_stuff\n$ vim myql/contrib/weather/weather.py  from myql.myql import MYQL # If ever you want to use the module\n# Your code", 
            "title": "How to contribute"
        }
    ]
}